// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum CategoryType {
  DEFAULT
  CUSTOM
}

enum Grade {
  FORGOT
  HARD
  OKAY
  EASY
}

model User {
  id  Int @id @default(autoincrement())
  firstName String @map("first_name")
  lastName String @map("last_name")
  email String @unique
  password String
  categories Category[]
  words Word[]
  reviews ReviewProcess[]
  @@map("users")
}

model Category {
  id Int @id @default(autoincrement())
  type CategoryType
  name String
  user User @relation(fields: [userId], references: [id])
  userId Int @map("user_id")
  slug String
  words Word[] @relation("CategoryWords")
  @@unique([userId, slug]) // Slug must be unique only to that user
  @@map("categories")
}

model Word {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int @map("author_id")
  categories Category[] @relation("CategoryWords")
  kr String
  en String
  example String?
  reviews ReviewProcess[]
  @@map("words")
}


// Optional terms, are blank at creating but updated after user encounters words in flashcard review
model ReviewProcess {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  word Word @relation(fields: [wordId], references: [id])
  wordId Int
  lastReviewed DateTime? @map("last_reviewed")
  nextReview DateTime? @map("next_review")
  interval Int @default(1) // in days
  easeFactor Float @default(2.5) @map("ease_factor")
  repetition Int @default(0)
  grade Grade? 
}